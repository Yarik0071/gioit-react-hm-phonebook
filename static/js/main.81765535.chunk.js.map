{"version":3,"sources":["components/ContactsList/contactlist.js","components/ContactForm/contactform.js","components/Filter/filter.js","index.js"],"names":["ContactList","contacts","remuveContact","TransitionGroup","component","className","map","id","name","number","CSSTransition","key","timeout","classNames","type","onClick","ContactForm","state","showAlert","handleChange","e","preventDefault","target","value","setState","changeAlert","prevState","filterName","props","addContact","filter","item","length","setTimeout","handleSubmit","this","in","unmountOnExit","onSubmit","onChange","Component","Filter","handleFilter","App","changeFilter","toLowerCase","includes","value1","value2","contact","uuidv4","alert","persistedzcontacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filterContact","appear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81765535.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from 'prop-types'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\n\nimport \"../../css/move.css\"\n\n\nexport default function ContactList({ contacts, remuveContact }) {\n  return (\n    <>\n      <TransitionGroup component='ul' className=\"contactList\">\n        {contacts.map(({ id, name, number }) => (\n          <CSSTransition \n          key={id}\n          timeout={250}\n          classNames=\"listItem\"\n          >\n          <li className=\"contactListItem\" key={id} id={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              className=\"buttonDelete\"\n              type=\"button\"\n              onClick={() => {\n                remuveContact(id);\n              }}\n            >\n              X\n            </button>\n          </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  remuveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired)\n}","import React, { Component } from \"react\"\nimport PropTypes from 'prop-types'\nimport { CSSTransition } from \"react-transition-group\"\n\nexport default class ContactForm extends Component {\n\n  state = {\n    name: '',\n    number: '',\n    showAlert: false\n  }\n\n  handleChange = e => {\n    e.preventDefault()\n    const { name, value } = e.target \n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  changeAlert = () => {\n    this.setState((prevState) => {\n      return {\n        showAlert: !prevState.showAlert,\n      };\n    });\n  }\n\n  filterName = () => {\n    const { contacts, addContact } = this.props\n    const { name, number } = this.state\n\n    let initialValue = contacts.filter(item => item.name === name)\n    if(initialValue.length > 0) {\n      this.changeAlert()\n      setTimeout(() => { this.changeAlert() }, 3000);\n    } else {\n      addContact(name, number)\n    }\n  }\n\n\n  handleSubmit = e => {\n    e.preventDefault()\n    const { addContact } = this.props\n    const { name, number } = this.state\n\n    this.props.contacts.length > 0 ? this.filterName() : addContact(name, number)\n\n    this.setState({\n      name: '',\n      number: ''\n    })\n  }\n\n  render() {\n    const { name, number, showAlert } = this.state\n    return (\n      <>\n     <CSSTransition \n     classNames='alertAnimation'\n     in={showAlert} \n     timeout={250}\n     unmountOnExit\n     >\n       <div className=\"alert\"><p>Contact is already exist</p></div>\n       </CSSTransition>\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            className=\"formInput\"\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={this.handleChange}\n          ></input>\n        </label>\n        <label>\n          Number\n          <input\n            className=\"formInput\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n          ></input>\n        </label>\n        <button type=\"submit\" className=\"buttonSubmit\">\n          Add contact\n        </button>\n      </form>\n      </>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired),\n  addContact: PropTypes.func.isRequired\n}","import React from \"react\"\nimport PropTypes from 'prop-types'\n\nexport default function Filter({ handleFilter }) {\nreturn (\n    <label\n    className=\"filter\"\n    > \n      Find contacts by name\n      <input \n      type=\"name\"\n      name=\"filter\"\n      onChange={handleFilter}\n      ></input>\n      </label>\n)\n}\n\nFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired\n}","import React, {Component} from \"react\";\nimport ReactDOM from 'react-dom';\nimport {CSSTransition} from 'react-transition-group'\nimport {v4 as uuidv4} from 'uuid';\nimport ContactList from \"./components/ContactsList/contactlist.js\"\nimport ContactForm from \"./components/ContactForm/contactform.js\"\nimport Filter from \"./components/Filter/filter.js\"\n\n\nimport \"./components/ContactForm/contactform.css\"\nimport \"./components/ContactsList/contactlist.css\"\nimport \"./components/Filter/filter.css\"\nimport \"./css/styles.css\"\nimport \"./css/move.css\"\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount(){\n    const persistedzcontacts = localStorage.getItem(\"contacts\")\n\n    if(persistedzcontacts) {\n      this.setState({\n        contacts: JSON.parse(persistedzcontacts)\n      })\n    }\n  }\n\n  componentDidUpdate( prevProps, prevState) {\n    if(prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n    }\n  }\n\n  changeFilter = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  addContact = (value1, value2) => {\n    const contact = {\n      name: value1,\n      number: value2,\n      id: uuidv4(),\n    };\n\n    this.setState((prevState) => {\n      return {\n        contacts: [...prevState.contacts, contact],\n      };\n    });\n  };\n\n  filterName = (value) => {\n    this.state.contacts.map((item) => item.name === value && alert(\"stop!\"));\n  };\n\n  handleFilter = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  remuveContact = (id) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter((item) => item.id !== id),\n      };\n    });\n  };\n\n  render() {\n    const filterContact = this.changeFilter();\n    return (\n      <>\n        <div>\n          <CSSTransition\n            in={true}\n            appear={true}\n            timeout={500}\n            classNames=\"logotype\"\n          >\n            <h1 className=\"logo\">Phonebook</h1>\n          </CSSTransition>\n\n          <ContactForm\n            addContact={this.addContact}\n            contacts={this.state.contacts}\n          />\n\n          <h2>Contacts</h2>\n      \n            <CSSTransition\n            in={this.state.contacts.length > 1}\n            classNames=\"filter\"\n            timeout={250}\n            unmountOnExit\n            >\n              <Filter handleFilter={this.handleFilter} />\n            </CSSTransition>\n\n          {filterContact.length > 0 && (\n            <ContactList\n              contacts={filterContact}\n              remuveContact={this.remuveContact}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render( <App /> , document.getElementById('root'));"],"sourceRoot":""}